import webiopi
import datetime
import logging
import logging.handlers


GPIO = webiopi.GPIO # Helper for LOW/HIGH values
HEATER = 0 # Heater plugged on the Expander Pin 7
MIN = 22 # Minimum temperature in celsius
MAX = 24 # Maximum temperature in celsius
AUTO = True

my_logger = logging.getLogger('MyLogger')


# programs are (hour, how many minutes to run for)
programs = (0, 10), (1, 10), (2, 10), (3, 10), (4, 10), (5, 10), (6, 10), (7, 10), (8, 10), (9, 10), (10, 10), (11, 45), (12, 10), (13, 10), (14, 10), (15, 10), (16, 52), (17, 31), (18, 10), (19, 10), (20, 10), (21, 10), (22, 10), (23, 10), (24, 10)
temphistory = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

# setup function is automatically called at WebIOPi startup
def setup():
    mcp = webiopi.deviceInstance("piface") # retrieve the device named "mcp" in the configuration 
    mcp.setFunction(HEATER, GPIO.OUT)
    file_name = 'test.csv'
    
#    my_logger = logging.getLogger('MyLogger')
    my_logger.setLevel(logging.INFO)
    handler = logging.handlers.RotatingFileHandler(
    file_name, maxBytes=2000, backupCount=5)
    
    my_logger.addHandler(handler)

# loop function is repeatedly called by WebIOPi 
def loop():
    global my_logger
    global temphistory
#     file_name = 'test.log'
#     
#     my_logger = logging.getLogger('MyLogger')
#     my_logger.setLevel(logging.INFO)
#     handler = logging.handlers.RotatingFileHandler(
#               file_name, maxBytes=2000, backupCount=5)
#     
#     my_logger.addHandler(handler)
    
    
    if (AUTO):        
        tmp = webiopi.deviceInstance("temp0") # retrieve the device named "tmp" in the configuration
        mcp = webiopi.deviceInstance("piface") # retrieve the device named "mcp" in the configuration 
        celsius = tmp.getCelsius() # retrieve current temperature
        temphistory.pop(0)
        temphistory.append(celsius)
       
        now = datetime.datetime.now()
        curprog = programs[now.hour]
        
        
        print("%s, %f" % (now.strftime("%c"), celsius))
        my_logger.info("'%s', %f" % (now.strftime("%c"), celsius))

        
        if(curprog[1] > now.minute):
            mcp.digitalWrite(HEATER, GPIO.HIGH)
            #AUTO = True
        else:            
            mcp.digitalWrite(HEATER, GPIO.LOW)
            
        webiopi.sleep(2)

# destroy function is called at WebIOPi shutdown
def destroy():
    mcp = webiopi.deviceInstance("piface") # retrieve the device named "mcp" in the configuration 
    mcp.digitalWrite(HEATER, GPIO.LOW) # turn off to avoid over heating

# a simple macro to return heater mode
@webiopi.macro
def getMode():
    if (AUTO):
        return "Auto"
    return "Manual"

# simple macro to set and return heater mode
@webiopi.macro
def setMode(mode):
    global AUTO
    if (mode == "auto"):
        AUTO = True
    elif (mode == "manual"):
        AUTO = False
    return getMode()

@webiopi.macro
def getTempHistory():    
    return temphistory


